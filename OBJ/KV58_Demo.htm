<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\KV58_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\KV58_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat May 05 17:22:48 2018
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PIT0_IRQHandler &rArr; CtrlTask &rArr; set_Angle &rArr; signal2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[d2]">__aeabi_assert</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">__aeabi_assert</a><BR>
 <LI><a href="#[147]">uart_putchar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[147]">uart_putchar</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[56]">CAN0_Bus_Off_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a9]">CAN0_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN0_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[57]">CAN0_Error_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[55]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[59]">CAN0_Rx_Warning_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[58]">CAN0_Tx_Warning_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5a]">CAN0_Wake_Up_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[69]">CAN1_Bus_Off_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[aa]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN1_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[6a]">CAN1_Error_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[68]">CAN1_ORed_Message_buffer_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[6c]">CAN1_Rx_Warning_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[6b]">CAN1_Tx_Warning_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[6d]">CAN1_Wake_Up_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[7e]">CAN2_Bus_Off_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[af]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(i.CAN2_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[7f]">CAN2_Error_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[7d]">CAN2_ORed_Message_buffer_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[81]">CAN2_Rx_Warning_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[80]">CAN2_Tx_Warning_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[82]">CAN2_Wake_Up_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[32]">CMP0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[33]">CMP1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[50]">CMP2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[66]">CMP3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[42]">DAC0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[87]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[91]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[92]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[93]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[94]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[95]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[96]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[88]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[89]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8a]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8b]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8c]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8d]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8e]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8f]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[90]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[97]">DMA_Error_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[83]">DefaultISR</a> from startup_mkv58f24.o(.text) referenced 118 times from startup_mkv58f24.o(RESET)
 <LI><a href="#[4c]">ENC_COMPARE_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[4d]">ENC_HOME_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[4f]">ENC_INDEX_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[4e]">ENC_WDOG_SAB_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[ab]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[6e]">ENET_1588_Timer_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[ae]">ENET_Error_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[71]">ENET_Error_IRQHandler</a> from fsl_enet.o(i.ENET_Error_IRQHandler) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[ad]">ENET_Receive_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[70]">ENET_Receive_IRQHandler</a> from fsl_enet.o(i.ENET_Receive_IRQHandler) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[ac]">ENET_Transmit_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[6f]">ENET_Transmit_IRQHandler</a> from fsl_enet.o(i.ENET_Transmit_IRQHandler) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[1c]">FTFE_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[34]">FTM0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[35]">FTM1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3f]">FTM2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[51]">FTM3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[31]">HSADC0_CCA_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[53]">HSADC0_CCB_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[54]">HSADC1_CCA_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[67]">HSADC1_CCB_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[30]">HSADC_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[98]">I2C0_DriverIRQHandler</a> from fsl_i2c.o(i.I2C0_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[99]">I2C1_DriverIRQHandler</a> from fsl_i2c.o(i.I2C1_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[1f]">LLWU_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[43]">MCG_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[41]">PDB1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3a]">PIT0_IRQHandler</a> from systemcar.o(i.PIT0_IRQHandler) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3b]">PIT1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3c]">PIT2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[3d]">PIT3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[1e]">PMC_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[63]">PWM0_CAP_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5b]">PWM0_CMP0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5d]">PWM0_CMP1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5f]">PWM0_CMP2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[61]">PWM0_CMP3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[65]">PWM0_FAULT_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5c]">PWM0_RELOAD0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5e]">PWM0_RELOAD1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[60]">PWM0_RELOAD2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[62]">PWM0_RELOAD3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[64]">PWM0_RERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[7a]">PWM1_CAP_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[72]">PWM1_CMP0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[74]">PWM1_CMP1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[76]">PWM1_CMP2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[78]">PWM1_CMP3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[7c]">PWM1_FAULT_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[73]">PWM1_RELOAD0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[75]">PWM1_RELOAD1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[77]">PWM1_RELOAD2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[79]">PWM1_RELOAD3_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[7b]">PWM1_RERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[28]">Reserved46_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[52]">Reserved88_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9a]">SPI0_DriverIRQHandler</a> from fsl_dspi.o(i.SPI0_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9b]">SPI1_DriverIRQHandler</a> from fsl_dspi.o(i.SPI1_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a8]">SPI2_DriverIRQHandler</a> from fsl_dspi.o(i.SPI2_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[85]">SystemInit</a> from system_mkv58f24.o(i.SystemInit) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[21]">TRNG0_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9f]">UART0_ERR_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9e]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a> from main.o(i.UART0_RX_TX_IRQHandler) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a1]">UART1_ERR_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a0]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a3]">UART2_ERR_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a2]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a5]">UART3_ERR_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[37]">UART3_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a4]">UART3_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[36]">UART3_RX_TX_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a7]">UART4_ERR_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[39]">UART4_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[a6]">UART4_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[38]">UART4_RX_TX_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9d]">UART5_ERR_DriverIRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[27]">UART5_ERR_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[9c]">UART5_RX_TX_DriverIRQHandler</a> from fsl_uart.o(i.UART5_RX_TX_DriverIRQHandler) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[26]">UART5_RX_TX_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[40]">XBARA_IRQHandler</a> from startup_mkv58f24.o(.text) referenced from startup_mkv58f24.o(RESET)
 <LI><a href="#[86]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mkv58f24.o(.text)
 <LI><a href="#[b0]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[84]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[86]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[b1]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[14c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CAN2_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>CAN2_Bus_Off_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CAN2_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CAN2_Tx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CAN2_Rx_Warning_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CAN2_Wake_Up_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ENC_COMPARE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ENC_HOME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ENC_INDEX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ENC_WDOG_SAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>ENET_Error_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>ENET_Receive_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>ENET_Transmit_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>HSADC0_CCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>HSADC0_CCB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>HSADC1_CCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>HSADC1_CCB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>HSADC_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>PWM0_CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>PWM0_CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PWM0_CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>PWM0_CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>PWM0_CMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>PWM0_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>PWM0_RELOAD0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>PWM0_RELOAD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>PWM0_RELOAD2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>PWM0_RELOAD3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>PWM0_RERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1_CAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PWM1_CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWM1_CMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_RELOAD0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_RELOAD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1_RELOAD2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1_RELOAD3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1_RERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TRNG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>UART3_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>UART4_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>UART5_ERR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>XBARA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkv58f24.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>arm_rfft_init_q15</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, arm_rfft_init_q15.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_arm_init
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPeriodTimerInit
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_RControl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_LControl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_RControl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_LControl
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_RControl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_LControl
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_RControl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_LControl
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_RControl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_LControl
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[153]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[154]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[155]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[157]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bb]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[b2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[158]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>ADC0_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_adc16.o(i.ADC0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>ADC0_Once</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fsl_adc16.o(i.ADC0_Once))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC0_Once
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_get
</UL>

<P><STRONG><a name="[c8]"></a>ADC0_Start</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fsl_adc16.o(i.ADC0_Start))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Once
</UL>

<P><STRONG><a name="[c9]"></a>ADC_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, systemcar.o(i.ADC_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_get &rArr; ADC0_Once
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Once
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[ca]"></a>BOARD_BootClockRUN_240M</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, clock_config.o(i.BOARD_BootClockRUN_240M))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BOARD_BootClockRUN_240M &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetInternalRefClkConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitOsc0
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>BOARD_InitOsc0</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, clock_config.o(i.BOARD_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_InitOsc0 &rArr; CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN_240M
</UL>

<P><STRONG><a name="[d0]"></a>Beer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systemcar.o(i.Beer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Beer_init &rArr; gpio_init &rArr; port_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>CAN0_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_flexcan.o(i.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN_240M
</UL>

<P><STRONG><a name="[d5]"></a>CLOCK_EnablePll0</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_EnablePll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnablePll0
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
</UL>

<P><STRONG><a name="[d6]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetEr32kClkFreq &rArr; CLOCK_GetOsc0ErClkUndivFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[d8]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[dd]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[de]"></a>CLOCK_GetFreq</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPeriodTimerInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[e0]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[e2]"></a>CLOCK_GetOsc0ErClkDivFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkDivFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetOsc0ErClkDivFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[d7]"></a>CLOCK_GetOsc0ErClkUndivFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkUndivFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetOsc0ErClkUndivFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[da]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[e1]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetPll0Freq &rArr; CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[df]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[cf]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitOsc0
</UL>

<P><STRONG><a name="[d3]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_SetInternalRefClkConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetInternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetInternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN_240M
</UL>

<P><STRONG><a name="[d4]"></a>CLOCK_SetPbeMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN_240M
</UL>

<P><STRONG><a name="[e6]"></a>ConuterClean</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, systemcar.o(i.ConuterClean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConuterClean
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[e8]"></a>CounterGet_L</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemcar.o(i.CounterGet_L))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[ea]"></a>CounterGet_R</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemcar.o(i.CounterGet_R))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[eb]"></a>CounterInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, systemcar.o(i.CounterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CounterInit &rArr; port_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>CtrlPeriodTimerInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, systemcar.o(i.CtrlPeriodTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CtrlPeriodTimerInit &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>CtrlTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.CtrlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CtrlTask &rArr; set_Angle &rArr; signal2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>Draw_BMP</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, oled.o(i.Draw_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Draw_BMP &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
</UL>

<P><STRONG><a name="[f3]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_edma.o(i.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_GetChannelStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fsl_edma.o(i.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[71]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_enet.o(i.ENET_Error_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_enet.o(i.ENET_Receive_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_enet.o(i.ENET_Transmit_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>FFT_arm_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fft_arm.o(i.FFT_arm_init))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_rfft_init_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>FTM_GetDefaultConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_ftm.o(i.FTM_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_GetDefaultConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMInit
</UL>

<P><STRONG><a name="[fc]"></a>FTM_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fsl_ftm.o(i.FTM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FTM_Init &rArr; FTM_SetReloadPoints
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetReloadPoints
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetPwmSync
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMInit
</UL>

<P><STRONG><a name="[ff]"></a>FTM_SetupPwm</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, fsl_ftm.o(i.FTM_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FTM_SetupPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMInit
</UL>

<P><STRONG><a name="[108]"></a>FTM_UpdatePwmDutycycle</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, fsl_ftm.o(i.FTM_UpdatePwmDutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_UpdatePwmDutycycle
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMDuty1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMChange2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMChange1
</UL>

<P><STRONG><a name="[137]"></a>Fuzzy_control</STRONG> (Thumb, 1464 bytes, Stack size 72 bytes, fuzzy_control.o(i.Fuzzy_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Fuzzy_control
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_speed2
</UL>

<P><STRONG><a name="[100]"></a>GPIO_PinInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[98]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>Key_scan</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, ui.o(i.Key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Key_scan &rArr; OLED_CLS &rArr; OLED_WrDat
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_display
</UL>

<P><STRONG><a name="[107]"></a>MotorPWMChange1</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, systemcar.o(i.MotorPWMChange1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorPWMChange1 &rArr; FTM_UpdatePwmDutycycle
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_UpdatePwmDutycycle
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetSoftwareTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[10a]"></a>MotorPWMChange2</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, systemcar.o(i.MotorPWMChange2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorPWMChange2 &rArr; FTM_UpdatePwmDutycycle
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_UpdatePwmDutycycle
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetSoftwareTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[10b]"></a>MotorPWMInit</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, systemcar.o(i.MotorPWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MotorPWMInit &rArr; FTM_Init &rArr; FTM_SetReloadPoints
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetupPwm
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetDefaultConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>OLED_CLS</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled.o(i.OLED_CLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_CLS &rArr; OLED_WrDat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[110]"></a>OLED_DLY_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, oled.o(i.OLED_DLY_ms))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[10d]"></a>OLED_Fill</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, oled.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Fill &rArr; OLED_WrDat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[10e]"></a>OLED_Init</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Init &rArr; gpio_init &rArr; port_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DLY_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
</UL>

<P><STRONG><a name="[111]"></a>OLED_P6x8Str</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, oled.o(i.OLED_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shownum_OLED_P6x8Str
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_set
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showname_OLED_P6x8Str
</UL>

<P><STRONG><a name="[f6]"></a>OLED_Set_Pos</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>

<P><STRONG><a name="[10c]"></a>OLED_WrCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled.o(i.OLED_WrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[f7]"></a>OLED_WrDat</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled.o(i.OLED_WrDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WrDat
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>

<P><STRONG><a name="[116]"></a>PIDInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pid.o(i.PIDInit))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Par_init
</UL>

<P><STRONG><a name="[3a]"></a>PIT0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systemcar.o(i.PIT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PIT0_IRQHandler &rArr; CtrlTask &rArr; set_Angle &rArr; signal2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlTask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Irq_Dis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>PIT_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIT_Init &rArr; PIT_GetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPeriodTimerInit
</UL>

<P><STRONG><a name="[115]"></a>Par_init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, parameter.o(i.Par_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Par_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_fliter_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>SPI2_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_dspi.o(i.SPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>ServoPWMDuty1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, systemcar.o(i.ServoPWMDuty1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ServoPWMDuty1 &rArr; FTM_UpdatePwmDutycycle
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_UpdatePwmDutycycle
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetSoftwareTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Angle
</UL>

<P><STRONG><a name="[11a]"></a>ServoPWMInit</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, systemcar.o(i.ServoPWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ServoPWMInit &rArr; FTM_Init &rArr; FTM_SetReloadPoints
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetupPwm
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetDefaultConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>Showname_OLED_P6x8Str</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ui.o(i.Showname_OLED_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Showname_OLED_P6x8Str &rArr; Shownum_OLED_P6x8Str &rArr; OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shownum_OLED_P6x8Str
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_display
</UL>

<P><STRONG><a name="[11c]"></a>Shownum_OLED_P6x8Str</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ui.o(i.Shownum_OLED_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Shownum_OLED_P6x8Str &rArr; OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showname_OLED_P6x8Str
</UL>

<P><STRONG><a name="[11e]"></a>Speed_LControl</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, data_analyse.o(i.Speed_LControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Speed_LControl &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[11f]"></a>Speed_RControl</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, data_analyse.o(i.Speed_RControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Speed_RControl &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[85]"></a>SystemInit</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, system_mkv58f24.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart.o(i.UART0_DriverIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_uart.o(i.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.UART0_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART0_RX_TX_IRQHandler &rArr; Shownum_OLED_P6x8Str &rArr; OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UWB_RNG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Query_Str
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shownum_OLED_P6x8Str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_uart.o(i.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_uart.o(i.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>UART3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart.o(i.UART3_DriverIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>UART3_RX_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_uart.o(i.UART3_RX_TX_DriverIRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>UART4_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart.o(i.UART4_DriverIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>UART4_RX_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_uart.o(i.UART4_RX_TX_DriverIRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>UART5_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_uart.o(i.UART5_DriverIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_RX_TX_DriverIRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>UART5_RX_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_uart.o(i.UART5_RX_TX_DriverIRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv58f24.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>UART_ClearStatusFlags</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, fsl_uart.o(i.UART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>UART_GetStatusFlags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
</UL>

<P><STRONG><a name="[112]"></a>UART_Irq_Dis</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_Irq_Dis))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>UART_Irq_En</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_Irq_En))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>UART_Query_Char</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_Query_Char))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Query_Str
</UL>

<P><STRONG><a name="[121]"></a>UART_Query_Str</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_uart.o(i.UART_Query_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Query_Str
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Query_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>UI_display</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ui.o(i.UI_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UI_display &rArr; Showname_OLED_P6x8Str &rArr; Shownum_OLED_P6x8Str &rArr; OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_set
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showname_OLED_P6x8Str
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>UI_init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, ui.o(i.UI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UI_init &rArr; Draw_BMP &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_delay_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init_NoALT
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>UWB_RNG</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, uwb.o(i.UWB_RNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UWB_RNG
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15b]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[11d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shownum_OLED_P6x8Str
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DriverIRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetupPwm
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetDefaultConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetInstance
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_DriverIRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[15c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[136]"></a>caculate_speed2</STRONG> (Thumb, 854 bytes, Stack size 40 bytes, data_analyse.o(i.caculate_speed2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = caculate_speed2 &rArr; Fuzzy_control
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[12f]"></a>cursor_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ui.o(i.cursor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cursor_set &rArr; OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_display
</UL>

<P><STRONG><a name="[138]"></a>filter</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, data_analyse.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = filter &rArr; ADC_get &rArr; ADC0_Once
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_get
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
</UL>

<P><STRONG><a name="[e7]"></a>ftm_quad_clean</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ftm.o(i.ftm_quad_clean))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConuterClean
</UL>

<P><STRONG><a name="[e9]"></a>ftm_quad_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ftm.o(i.ftm_quad_get))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterGet_R
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterGet_L
</UL>

<P><STRONG><a name="[ed]"></a>ftm_quad_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, fsl_ftm.o(i.ftm_quad_init))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterInit
</UL>

<P><STRONG><a name="[104]"></a>gpio_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_gpio.o(i.gpio_get))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[d1]"></a>gpio_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_init &rArr; port_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_io_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beer_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[10f]"></a>gpio_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_gpio.o(i.gpio_set))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramp_process
</UL>

<P><STRONG><a name="[117]"></a>kalman_fliter_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kalman.o(i.kalman_fliter_init))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Par_init
</UL>

<P><STRONG><a name="[105]"></a>lptmr_delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_lptmr.o(i.lptmr_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[84]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; UI_display &rArr; Showname_OLED_P6x8Str &rArr; Shownum_OLED_P6x8Str &rArr; OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_task
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPut_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_io_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_delay_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_display
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Irq_En
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Par_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_arm_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPeriodTimerInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beer_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN_240M
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ec]"></a>port_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fsl_gpio.o(i.port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPut_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterInit
</UL>

<P><STRONG><a name="[132]"></a>port_init_NoALT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.port_init_NoALT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_init_NoALT &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
</UL>

<P><STRONG><a name="[141]"></a>ramp_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, data_analyse.o(i.ramp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ramp_process
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
</UL>

<P><STRONG><a name="[f1]"></a>set_Angle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_analyse.o(i.set_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = set_Angle &rArr; signal2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMDuty1
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlTask
</UL>

<P><STRONG><a name="[f2]"></a>set_Speed</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, data_analyse.o(i.set_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = set_Speed &rArr; Speed_RControl &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_speed2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_RControl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_LControl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMChange2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMChange1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterGet_R
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CounterGet_L
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConuterClean
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlTask
</UL>

<P><STRONG><a name="[142]"></a>signal2</STRONG> (Thumb, 1888 bytes, Stack size 72 bytes, data_analyse.o(i.signal2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = signal2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzy_control
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramp_process
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Angle
</UL>

<P><STRONG><a name="[13e]"></a>std_io_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, systemcar.o(i.std_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std_io_init &rArr; gpio_init &rArr; port_init &rArr; PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>timerset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, data_analyse.o(i.timerset))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Speed
</UL>

<P><STRONG><a name="[13a]"></a>uartPut_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, systemcar.o(i.uartPut_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uartPut_init &rArr; uart_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>uart_init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, fsl_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPut_init
</UL>

<P><STRONG><a name="[146]"></a>uart_putbuff</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, fsl_uart.o(i.uart_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcan_sendware
</UL>

<P><STRONG><a name="[147]"></a>uart_putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_uart.o(i.uart_putchar))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcan_sendware
</UL>

<P><STRONG><a name="[130]"></a>value_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ui.o(i.value_set))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_display
</UL>

<P><STRONG><a name="[148]"></a>vcan_sendware</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, systemcar.o(i.vcan_sendware))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vcan_sendware &rArr; uart_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_task
</UL>

<P><STRONG><a name="[13f]"></a>wireless_task</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, data_analyse.o(i.wireless_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wireless_task &rArr; vcan_sendware &rArr; uart_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcan_sendware
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13b]"></a>NVIC_EncodePriority</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>CLOCK_GetFllExtRefClkFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllExtRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>

<P><STRONG><a name="[d9]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[e3]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[dc]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[e5]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[e4]"></a>CLOCK_GetPll0RefFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
</UL>

<P><STRONG><a name="[118]"></a>DSPI_CommonIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_dspi.o(i.DSPI_CommonIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DriverIRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>FTM_GetInstance</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_ftm.o(i.FTM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_GetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
</UL>

<P><STRONG><a name="[fd]"></a>FTM_SetPwmSync</STRONG> (Thumb, 160 bytes, Stack size 36 bytes, fsl_ftm.o(i.FTM_SetPwmSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTM_SetPwmSync
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
</UL>

<P><STRONG><a name="[fe]"></a>FTM_SetReloadPoints</STRONG> (Thumb, 234 bytes, Stack size 36 bytes, fsl_ftm.o(i.FTM_SetReloadPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTM_SetReloadPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
</UL>

<P><STRONG><a name="[140]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_gpio.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>

<P><STRONG><a name="[101]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_gpio.o(i.GPIO_WritePinOutput))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[114]"></a>PORT_SetPinConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_gpio.o(i.PORT_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init_NoALT
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>

<P><STRONG><a name="[102]"></a>I2C_TransferCommonIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C_TransferCommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TransferCommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DriverIRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[113]"></a>PIT_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_pit.o(i.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_GetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[12a]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_uart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Irq_Dis
</UL>

<P><STRONG><a name="[12c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Irq_En
</UL>

<P><STRONG><a name="[109]"></a>FTM_SetSoftwareTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemcar.o(i.FTM_SetSoftwareTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoPWMDuty1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMChange2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPWMChange1
</UL>

<P><STRONG><a name="[134]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[b0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
